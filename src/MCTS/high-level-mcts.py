

class ActionNode:
    """
    Action node for the high-level MCTS.
    action: string from {overtaking, keeping lane, turning left, turning right, left change, right change, and brake}
    children: list of StateNode
    parent: StateNode
    value: float
    visits: int
    """
    def __init__(self, action: string):
        self.action = action
        self.children = []
        self.parent = None
        self.value = 0
        self.visits = 0
    
class StateNode:
    """
    State node for the high-level MCTS.
    ob: observation generated by the qwen2.5-vl-3B model
    look: lookahead map
    state: current state of the vehicle
    prev_action: previous action taken by the vehicle
    id: id of the state
    valid_actions: list of valid actions
    history: list of previous actions
    parent: parent state node
    parent_action_id: id of the parent action
    best_action_node: best action node
    N: number of visits to the state
    children: list of StateNode
    children_probs: list of probabilities of the children
    reward: reward of the state
    score: score of the state
    done: whether the state is terminal
    predicted_reward: predicted reward of the state
    use_llm: whether to use LLM to generate the state
    DISCOUNT_FACTOR: discount factor
    """
    def __init__(self, reward=0, done=False):
        self.ob = None
        self.look = None
        self.inv = None # inverse of the lookahead map
        self.state = None
        self.prev_action = None
        self.id = None
        self.valid_actions = None
        self.history = []
        self.parent = None
        self.parent_action_id = None
        self.best_action_node = None
        

        self.N = 0
        self.children = []
        self.children_probs = []
        self.reward = reward/(1-DISCOUNT_FACTOR)
        self.score = 0
        self.done = done
        self.predicted_reward = 0
        self.use_llm = False

class MCTSAgent:
    """
    MCTS agent for the high-level MCTS.
    """
    def __init__(self):
        self.root = StateNode()
        self.action_nodes = []
        self.state_nodes = []
        self.action_space = ["overtaking", "keeping lane", "turning left", "turning right", "left change", "right change", "brake"]
        self.DISCOUNT_FACTOR = 0.95
        self.MAX_DEPTH = 3
        self.MAX_ROLLOUTS = 10
        

    def rollout(self, state_node: StateNode):
        """
        Rollout the state node.
        """
        pass

    def expand(self, state_node: StateNode):
        """
        Expand the state node.
        """
        pass

    def backpropagate(self, state_node: StateNode):
        """
        Backpropagate the state node.
        """
        pass
    
    def select(self, state_node: StateNode):
        """
        Select the best action node from the state node.
        """
        pass
    
    